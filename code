def train_model(model, criterion, optimizer, num_epochs=10):
    start = time.time()

    trainErr = []
    trainAcc = []
    validErr = []
    validAcc = []

    best_model_wts = copy.deepcopy(model.state_dict())
    best_acc = 0.0

    for epoch in range(num_epochs):

        # Each epoch has a training and validation phase
        for phase in ['train', 'val']:
            if phase == 'train':
                model.train()  # Set model to training mode
            else:
                model.eval()   # Set model to evaluate mode

            running_loss = 0.0
            running_corrects = 0
            total = 0

            # Iterate over data.
            for inputs, labels in dataloaders[phase]:
                inputs, labels = inputs.to(device), labels.to(device)

                # zero the parameter gradients
                optimizer.zero_grad()

                # forward
                # track history if only in train
                with torch.set_grad_enabled(phase == 'train'):
                    inputs = inputs.to(device)
                    outputs = model(inputs)
                    _, preds = torch.max(outputs.data, 1)
                    loss = criterion(outputs, labels)

                    # backward + optimize only if in training phase
                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                # statistics
                running_loss += loss.item() * inputs.size(0)
                total += labels.size(0)
                running_corrects += (preds == labels).sum().item()
            # if phase == 'train':
            #     scheduler.step()

            epoch_loss = running_loss / total
            epoch_acc  = running_corrects / total

            print('Epoch {}/{},{} ==> Loss: {:.4f} , Acc: {:.2f} %'.format(
                epoch+1, num_epochs,phase, epoch_loss, epoch_acc*100))
            
            
            if phase == 'train':
                trainErr.append(epoch_loss)
                trainAcc.append(epoch_acc*100)
            else:
                validErr.append(epoch_loss)
                validAcc.append(epoch_acc*100)

            # deep copy the model
            if phase == 'val' and epoch_acc > best_acc:
                best_acc = epoch_acc
                best_model_wts = copy.deepcopy(model.state_dict())
        print()

    endtime = time.time() - start
    print('Training complete in {:.0f}m {:.0f}s'.format( endtime // 60, endtime % 60))
    print('Best Validation Accuracy: {:4f} %'.format(best_acc*100))

    # load best model weights
    model.load_state_dict(best_model_wts)

    return model, trainErr, trainAcc, validErr, validAcc
